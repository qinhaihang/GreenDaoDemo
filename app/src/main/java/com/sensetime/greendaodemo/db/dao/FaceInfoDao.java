package com.sensetime.greendaodemo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sensetime.greendaodemo.db.entity.FaceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FACE_INFO".
*/
public class FaceInfoDao extends AbstractDao<FaceInfo, Long> {

    public static final String TABLENAME = "FACE_INFO";

    /**
     * Properties of entity FaceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FaceId = new Property(1, String.class, "faceId", false, "FACE_ID");
        public final static Property Age = new Property(2, int.class, "age", false, "AGE");
        public final static Property Gender = new Property(3, int.class, "gender", false, "GENDER");
        public final static Property FaceImage = new Property(4, String.class, "faceImage", false, "FACE_IMAGE");
        public final static Property Time = new Property(5, long.class, "time", false, "TIME");
        public final static Property IsSend = new Property(6, boolean.class, "isSend", false, "IS_SEND");
    }


    public FaceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FaceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FACE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FACE_ID\" TEXT NOT NULL ," + // 1: faceId
                "\"AGE\" INTEGER NOT NULL ," + // 2: age
                "\"GENDER\" INTEGER NOT NULL ," + // 3: gender
                "\"FACE_IMAGE\" TEXT NOT NULL ," + // 4: faceImage
                "\"TIME\" INTEGER NOT NULL ," + // 5: time
                "\"IS_SEND\" INTEGER NOT NULL );"); // 6: isSend
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FACE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FaceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFaceId());
        stmt.bindLong(3, entity.getAge());
        stmt.bindLong(4, entity.getGender());
        stmt.bindString(5, entity.getFaceImage());
        stmt.bindLong(6, entity.getTime());
        stmt.bindLong(7, entity.getIsSend() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FaceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFaceId());
        stmt.bindLong(3, entity.getAge());
        stmt.bindLong(4, entity.getGender());
        stmt.bindString(5, entity.getFaceImage());
        stmt.bindLong(6, entity.getTime());
        stmt.bindLong(7, entity.getIsSend() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FaceInfo readEntity(Cursor cursor, int offset) {
        FaceInfo entity = new FaceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // faceId
            cursor.getInt(offset + 2), // age
            cursor.getInt(offset + 3), // gender
            cursor.getString(offset + 4), // faceImage
            cursor.getLong(offset + 5), // time
            cursor.getShort(offset + 6) != 0 // isSend
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FaceInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFaceId(cursor.getString(offset + 1));
        entity.setAge(cursor.getInt(offset + 2));
        entity.setGender(cursor.getInt(offset + 3));
        entity.setFaceImage(cursor.getString(offset + 4));
        entity.setTime(cursor.getLong(offset + 5));
        entity.setIsSend(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FaceInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FaceInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FaceInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
